// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin



// =============================================================================
// Criscom's sass mixins - started: 20130703
// =============================================================================


// Media queries mixin - taken from SACFD p 152
// =============================================================================

@mixin MQ($canvas) {
  @if $canvas == XS {
    @media only screen and (min-width: $XS) and (max-width: $S - .01) { // 288 - 479
      @content;
    }
  }
  @else if $canvas == S {
    @media only screen and (min-width: $S) and (max-width: $M - .01) { // 480 - 687
      @content;
    }
  }
  @else if $canvas == M {
    @media only screen and (min-width: $M) and (max-width: $L) { // 748 - 768
      @content;
    }
  }
  @else if $canvas == L {
    @media only screen and (min-width: $L + .01) and (max-width: $XL - .01) { // 769 - 899
      @content;
    }
  }
    @else if $canvas == XL {
    @media only screen and (min-width: $XL) and (max-width: $XXL - .01) { // 900 - 959
      @content;
    }
  }

  @else if $canvas == XSplus {
    @media only screen and (min-width: $XS) { @content; } // >= 288
  }
  @else if $canvas == Splus {
    @media only screen and (min-width: $S) { @content; } // >= 480
  }
  @else if $canvas == Mplus {
    @media only screen and (min-width: $M) { @content; } // >= 688
  }
  @else if $canvas == Lplus {
    @media only screen and (min-width: $L) { @content; } // >= 768
  }
    @else if $canvas == XLplus {
    @media only screen and (min-width: $XL) { @content; } // >= 900 IN USE
  }
    @else if $canvas == XXLplus {
      @media only screen and (min-width: $XXL) { @content; } // >= 960 IN USE
    }
    @else if $canvas == XSneg {
    @media only screen and (max-width: $XS) { @content; } // <= 288
  }
  @else if $canvas == Sneg {
    @media only screen and (max-width: $S - .01) { @content; } // <= 480
  }
  @else if $canvas == Mneg {
    @media only screen and (max-width: $M) { @content; } // <= 748
  }
  @else if $canvas == Lneg {
    @media only screen and (max-width: $L - .01) { @content; } // <= 767, iPad // nochmals checken!!!
  }
  @else if $canvas == G900neg {
    @media only screen and (max-width: $G900) { @content; }
  }
  @else if $canvas == XLneg {
    @media only screen and (max-width: $XL - .01) { @content; } // <= 899 IN USE
    }
}

@mixin hide-text { // as of 04.03.2013 recommended approach to hide text and display an image. taken from: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757c9e03dda4e463fb0d4db5a5f82d7
  border: 0; 
  font: 0/0 a; 
  text-shadow: none; 
  color: transparent; 
  background-color: transparent;
}

@mixin hide-text-standard { // hide text and display image instead. taken from: http://sachagreif.com/useful-sass-mixins/
    overflow:hidden;
    text-indent:-9999px;
    display:block;
}

@mixin hide-text-outdated { // hide text alternative approach. taken from: http://nicolasgallagher.com/another-css-image-replacement-technique/
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}

// Mixin for box-sizing (taken from Sass and Compass for Webdesigners _mixins.scss)
// ====================================================================

@mixin bs($bs-type: $defined-bs-type) {
  -webkit-box-sizing: $bs-type;
  -moz-box-sizing: $bs-type;
  box-sizing: $bs-type;
}


// =============================================================================
// Image sprites for headers
// =============================================================================

 $bg-layout:vertical;
 @import "bg-sprites/*.png"; // Importing Sprites for headers
 @include all-bg-sprites-sprites;

// ====================================================================
// Mixin provided by ZEN Theme
// ====================================================================

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}



